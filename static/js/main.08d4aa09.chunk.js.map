{"version":3,"sources":["logo.png","setup/Home.js","recover/Home.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SetupHome","RecoverHome","props","fluid","sm","className","match","params","address","Home","src","logo","alt","width","to","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,uLCM5BC,MAJf,WACI,OAAO,0C,gDCiBIC,MAff,SAAqBC,GACjB,OACI,kBAAC,IAAD,CAAWC,OAAO,GACd,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKC,IAAE,EAACC,UAAU,QACd,0DADJ,kEAGKH,EAAMI,MAAMC,OAAOC,SAExB,kBAAC,IAAD,CAAKJ,IAAE,EAACC,UAAU,SAAlB,W,iBC6BGI,MApCf,WACI,OACI,kBAAC,IAAD,CAAWN,OAAO,GACd,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKC,IAAE,EAACC,UAAU,QAAlB,QACA,kBAAC,IAAD,CAAKD,IAAE,EAACC,UAAU,SAAlB,SAEA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKD,IAAE,EAACC,UAAU,QACd,4BAAI,yBAAKK,IAAKC,IAAMC,IAAI,OAAOC,MAAM,SAArC,cAEJ,kBAAC,IAAD,CAAKT,IAAE,EAACC,UAAU,SAAlB,SAIA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKD,IAAE,EAACC,UAAU,QAAlB,QACA,kBAAC,IAAD,CAAKD,IAAE,EAACC,UAAU,SAAlB,SAEA,kBAAC,IAAD,CAAKA,UAAU,6BACf,kBAAC,IAAD,CAAKD,IAAE,EAACC,UAAU,QACd,sCADJ,0CAIA,kBAAC,IAAD,CAAKD,IAAE,EAACC,UAAU,SAClB,uCADA,iEAGI,kBAAC,IAAD,CAAMS,GAAG,uDAAT,UCfDC,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWlB,IAChC,kBAAC,IAAD,CAAOiB,KAAK,oBAAoBC,UAAWjB,MCF7BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2D,MCTNiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.08d4aa09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.929c79fd.png\";","import React, { Component } from 'react';\n\nfunction SetupHome() {\n    return <h1>SetupHome</h1>;\n  }\n\nexport default SetupHome;","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Container from \"react-bootstrap/Container\";\nimport Col from 'react-bootstrap/Col';\n\nfunction RecoverHome(props) {\n    return (\n        <Container fluid={true}>  \n            <Row>\n            <Col sm className=\"left\">\n                <h1>Confirm recovery locations</h1>\n                Identify your five locations to recover your Gnosis Safe below.\n                {props.match.params.address}\n            </Col>\n            <Col sm className=\"right\">&nbsp;</Col>\n            </Row>\n        </Container>\n    );\n  }\n\nexport default RecoverHome;","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport logo from './logo.png'\nimport Container from \"react-bootstrap/Container\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <Container fluid={true}>  \n            <Row>\n            <Col sm className=\"left\">&nbsp;</Col>\n            <Col sm className=\"right\">&nbsp;</Col>\n            </Row>\n            <Row>\n            <Col sm className=\"left\">\n                <h1><img src={logo} alt=\"Logo\" width='80px'/>Mapcovery</h1>\n            </Col>\n            <Col sm className=\"right\">\n                &nbsp;\n            </Col>\n            </Row>       \n            <Row>\n            <Col sm className=\"left\">&nbsp;</Col>\n            <Col sm className=\"right\">&nbsp;</Col>\n            </Row>\n            <Row className=\"justify-content-md-center\">            \n            <Col sm className=\"left\">\n                <h3>Set up</h3>\n                Set up mapcovery for your Gnosis Safe.\n            </Col>\n            <Col sm className=\"right\">\n            <h3>Recover</h3>\n                Restore your Gnosis Safe by entering your Gnosis Safe address.\n                <Link to=\"/recover/0x94b112657957194b1279293af7a2ab7873014746\">\n                Go\n                </Link>\n            </Col>\n            </Row>\n        </Container>\n    );\n  }\n\nexport default Home;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Container from \"react-bootstrap/Container\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport SetupHome from './setup/Home'\nimport RecoverHome from './recover/Home'\nimport Home from './Home'\n\nfunction App() {\n  return (\n    <Router>        \n      <Route exact path=\"/\" component={Home} /> \n      <Route path=\"/setup\" component={SetupHome}/>     \n      <Route path=\"/recover/:address\" component={RecoverHome}/>      \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}