{"version":3,"sources":["routes/recover/styles.module.css","routes/home/styles.module.css","assets/logo.png","routes/home/components/Setup/styles.module.css","routes/home/components/Recover/styles.module.css","routes/recover/mapUtils.js","routes/recover/index.js","routes/home/components/Setup/index.js","routes/routes.js","routes/home/components/Recover/index.js","routes/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","pulsingDot","width","height","data","Uint8Array","size","onAdd","canvas","document","createElement","this","context","getContext","render","t","performance","now","beginPath","arc","Math","PI","fillStyle","strokeStyle","lineWidth","fill","getImageData","triggerRepaint","BOUNDING_BOX","getPointCoords","geohash","coords","Geohash","decode","searchPoints","a","url","headers","Accept","fetch","method","response","status","json","points","console","log","pointsStruct","p","name","geojson","error","setupMap","element","mapboxgl","accessToken","Map","center","container","style","zoom","maxZoom","on","addImage","pixelRatio","addLayer","e","features","geometry","coordinates","slice","description","properties","window","point","getCanvas","cursor","abs","lngLat","lng","popup","Popup","setLngLat","setHTML","addTo","remove","Recover","props","listener","useState","locations","setLocations","mapRef","React","createRef","safeAddress","history","location","state","useEffect","startListener","current","clearInterval","setInterval","oldLocations","className","styles","recover","recoverPanel","l","key","length","mapWrapper","ref","Setup","setup","src","logo","alt","HOME_URL","RECOVER_URL","setSafeAddress","ready","setReady","to","pathname","onSubmit","preventDefault","type","onChange","target","value","Home","page","left","right","App","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae2e2bab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recover\":\"styles_recover__nwTZu\",\"recoverPanel\":\"styles_recoverPanel__3Ziq5\",\"mapWrapper\":\"styles_mapWrapper__3s8Oc\",\"mapboxgl-popup\":\"styles_mapboxgl-popup__2rIw_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"styles_page__24UXt\",\"left\":\"styles_left__GM5oi\",\"right\":\"styles_right__3x0WN\"};","module.exports = __webpack_public_path__ + \"static/media/logo.929c79fd.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setup\":\"styles_setup__vJEoR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recover\":\"styles_recover__ZSACX\"};","import mapboxgl from 'mapbox-gl'\nimport Geohash from 'latlon-geohash'\nimport { ScatterplotLayer } from 'deck.gl'\n\nlet map\nconst size = 100\n\nconst pulsingDot = {\n  width: size,\n  height: size,\n  data: new Uint8Array(size * size * 4),\n  \n  onAdd: function() {\n    var canvas = document.createElement('canvas');\n    canvas.width = this.width;\n    canvas.height = this.height;\n    this.context = canvas.getContext('2d');\n  },\n  \n  render: function() {\n    var duration = 1000;\n    var t = (performance.now() % duration) / duration;\n    \n    var radius = size / 2 * 0.3;\n    var outerRadius = size / 2 * 0.7 * t + radius;\n    var context = this.context;\n    \n    // draw inner circle\n    context.beginPath();\n    context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n    context.fillStyle = 'rgba(255, 100, 100, 1)';\n    context.strokeStyle = 'white';\n    context.lineWidth = 2 + 4 * (1 - t);\n    context.fill();\n    \n    // update this image's data with data from the canvas\n    this.data = context.getImageData(0, 0, this.width, this.height).data;\n    \n    // keep the map repainting\n    map.triggerRepaint();\n    \n    // return `true` to let the map know that the image was updated\n    return true;\n  }\n};\n\nconst BOUNDING_BOX = [\n  [12, 50],\n  [14, 54]\n]\n\nconst FOAM_PENDING_COLOR = [46, 124, 230]\nconst FOAM_VERIFIED_COLOR = [38, 171, 95]\nconst FOAM_CHALLENGED_COLOR = [244, 128, 104]\nconst FOAM_REMOVED_COLOR = [255, 0, 0]\n\nconst getCenterPoint = (bounding_box) => (\n  [(bounding_box[0][0] + bounding_box[1][0]) / 2, (bounding_box[0][1] + bounding_box[1][1]) / 2]\n)\n\nconst getPointColor = (state) => {\n  if (state && state.status && state.status.type) {\n    if (state.status.type === \"applied\") { return FOAM_PENDING_COLOR }\n    else if (state.status.type === \"listing\") { return FOAM_VERIFIED_COLOR }\n    else if (state.status.type === \"challenged\") { return FOAM_CHALLENGED_COLOR }\n  } else {\n    return FOAM_REMOVED_COLOR\n  }\n}\n\nconst getPointCoords = (geohash) => {\n  const coords = Geohash.decode(geohash)\n  return [coords['lon'], coords['lat'], 0]\n}\n\nconst searchPoints = async () => {\n  const url = 'https://map-api-direct.foam.space/poi/filtered' +\n    '?swLng=' + BOUNDING_BOX[0][0] +\n    '&swLat=' + BOUNDING_BOX[0][1] +\n    '&neLng=' + BOUNDING_BOX[1][0] +\n    '&neLat=' + BOUNDING_BOX[1][1] +\n    '&status=listing' +\n    '&sort=most_value' +\n    '&limit=500' +\n    '&offset=0'\n\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers\n    })\n    let points\n    if (response && response.status === 200) {\n      points = await response.json()\n      console.log(points)            \n      const pointsStruct = points.map(p => (\n        {\n          \"type\": \"Feature\",\n          \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": getPointCoords(p.geohash),\n          },\n          \"properties\": {\n            \"description\": p.name\n          },\n          \"data\": {\n            \"geohash\": p.geohash,\n            \"name\": p.name\n          }\n        }\n      ))\n      const geojson = {\n        \"id\": \"points\",\n        \"type\": \"symbol\",\n        \"source\": {\n          \"type\": \"geojson\",\n          \"data\": {\n            \"type\": \"FeatureCollection\",\n            \"features\": pointsStruct\n          }\n        },\n        \"layout\": {\n          \"icon-image\": \"pulsing-dot\"\n        }\n      }\n      return geojson\n    }\n    return []\n  } catch (err) {\n    console.error(err)\n    return []\n  }\n}\n\nexport const setupMap = async (element) => {\n  if (element !== null) {\n    const geojson = await searchPoints()\n\n    mapboxgl.accessToken = 'pk.eyJ1IjoiZ2VybWFuOTIiLCJhIjoiY2p6cHB4NXd2MDI2djNjcnF4Y2E3NnpzMCJ9.ufsI1VW_rGWnHvTJ9VKvVA';\n    map = new mapboxgl.Map({\n      center: [13.363, 52.514],\n      container: element,\n      style: 'mapbox://styles/mapbox/dark-v10',\n      zoom: 13,\n      maxZoom: 16\n    })\n\n    map.on('load', () => {\n      map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n      console.log(geojson)\n      map.addLayer(geojson)\n    })\n\n    let popup\n\n    map.on('click', 'points', (e) => {\n      const coordinates = e.features[0].geometry.coordinates.slice()\n      const description = e.features[0].properties.description\n\n      // MUST USE REDUX HERE INSTEAD OF WINDOW, HAD NO TIME DURING HACKATHON\n      window.point = description\n    })\n  \n    map.on('mouseenter', 'points', (e) => {\n      map.getCanvas().style.cursor = 'pointer'\n\n      const coordinates = e.features[0].geometry.coordinates.slice()\n      const description = e.features[0].properties.description\n\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360\n      }\n      \n      popup = new mapboxgl.Popup()\n        .setLngLat(coordinates)\n        .setHTML(description)\n        .addTo(map)\n    })\n\n    map.on('mouseleave', 'points', () => {\n      map.getCanvas().style.cursor = ''\n      if (popup) {\n        popup.remove()\n      }\n    })\n    \n    return map\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport { setupMap } from './mapUtils'\nimport styles from './styles.module.css'\n\nconst Recover = (props) => {\n  const [locations, setLocations] = useState([])\n\n  let listener\n  const mapRef = React.createRef()\n  const safeAddress = props.history.location.state.safeAddress\n  \n  useEffect(() => {\n    startListener()\n    const map = setupMap(mapRef.current)\n\n    return () => clearInterval(listener)\n  }, [])\n\n  const startListener = () => {\n    // MUST USE REDUX HERE INSTEAD OF WINDOW, HAD NO TIME DURING HACKATHON\n    listener = setInterval(() => {\n      if (window.point && window.point != '') {\n        setLocations(oldLocations => [...oldLocations, window.point])\n        window.point = ''\n      }\n    }, 500);\n  }\n\n  return (\n    <div className={styles.recover}>\n      <div className={styles.recoverPanel}>\n        <h1>Confirm recovery locations</h1>\n        <p>Identify your five locations to recover your Gnosis Safe below.</p>\n        <p>{safeAddress}</p>\n        <div>\n          {locations.map(l => (\n            <p key={l}>{l}</p>\n          ))}\n        </div>\n        <div>\n          {locations.length >= 5 && (\n            <button>\n              Recover\n            </button>\n          )}\n        </div>\n      </div>\n      <div className={styles.mapWrapper}>\n        <div ref={mapRef}></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Recover","import React from 'react'\nimport logo from '../../../../assets/logo.png'\nimport styles from './styles.module.css'\n\nconst Setup = () => (\n  <div className={styles.setup}>\n    <h1><img src={logo} alt=\"Logo\" width='80px'/>Mapcovery</h1>\n  </div>\n)\n\nexport default Setup\n","export const HOME_URL = '/'\nexport const RECOVER_URL = '/recover'\n","import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { RECOVER_URL } from '../../../routes'\n// import { Form } from 'react-final-form'\n// import TextField from '../../../../components/forms/TextField'\n// import { composeValidators, mustBeEthereumAddress } from '../../../../components/forms/validators'\nimport styles from './styles.module.css'\n\nconst Recover = () => {\n  const [safeAddress, setSafeAddress] = useState('')\n  const [ready, setReady] = useState(false)\n\n  const submit = (e) => {\n    if (safeAddress !== null && safeAddress !== '') {\n      setReady(true)\n    }\n    else {\n      e.preventDefault()\n      // show error here\n    }\n  }\n\n  const updateSafeAddress = (e) => {\n    const safeAddress = e.target.value\n    setSafeAddress(safeAddress)\n  }\n\n  if (ready) {\n    return (\n      <Redirect to={{\n        pathname: RECOVER_URL,\n        state: {\n          safeAddress\n        }\n      }}/>\n    )\n  }\n\n  return (\n    <div className={styles.recover}>\n      <h3>Recover</h3>\n      <p>Restore your Gnosis Safe by entering your Gnosis Safe address.</p>\n      {/* <Form\n        onSubmit={submit}\n        render={(handleSubmit) => (\n          <TextField\n            validate={composeValidators(mustBeEthereumAddress)}\n            placeholder=\"0x...\"\n          />\n        )}\n      /> */}\n      <form onSubmit={submit}>\n        <input\n          type=\"text\"\n          onChange={updateSafeAddress}\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default Recover\n","import React from 'react'\nimport styles from './styles.module.css'\nimport Setup from './components/Setup'\nimport Recover from './components/Recover'\n\nconst Home = () => (\n  <div className={styles.page}>\n    <div className={styles.left}>\n      <Setup/>\n    </div>\n    <div className={styles.right}>\n      <Recover />\n    </div>\n  </div>\n)\n\nexport default Home\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Recover from './routes/recover'\nimport Home from './routes/home'\nimport {\n  HOME_URL,\n  RECOVER_URL\n} from './routes/routes'\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>        \n      <Route exact path={HOME_URL} component={Home} /> \n      <Route path={RECOVER_URL} component={Recover}/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}